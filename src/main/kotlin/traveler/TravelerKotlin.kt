/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package traveler

class TravelerKotlin : Traveler {

    override fun choose_best_sum(maxDistance: Int, cityVisits: Int, listOfCityDistances: MutableList<Int>?): Journey? {
        val cityList: List<City> = mapToCityList(listOfCityDistances)
        val cityPermutations = getAllPermutations(cityList, cityVisits)
        val bestSumPermutation = cityPermutations
            .filter { it.totalDistance() <= maxDistance }
            .maxByOrNull { it.totalDistance() }
        return bestSumPermutation?.let {
            Journey(it)
        }
    }

    private fun mapToCityList(listOfCityDistances: MutableList<Int>?): List<City> =
        listOfCityDistances?.mapIndexed { index, cityDistance -> City(index, cityDistance) }
            ?: throw IllegalArgumentException("Cannot be null input list")

    private fun <City> getAllPermutations(list: List<City>, permutationSize: Int): List<List<City>> {
        val permutations = mutableListOf<List<City>>()
        generatePermutations(list, permutationSize, mutableListOf(), permutations)
        return permutations
    }

    private fun <City> generatePermutations(
        cityList: List<City>,
        size: Int,
        currentPermutation: MutableList<City>,
        permutations: MutableList<List<City>>
    ) {
        if (currentPermutation.size == size) {
            permutations.add(currentPermutation.toList())
            return
        }

//        cityList.forEach {
//            currentPermutation.add(it)
//            generatePermutations(
//                cityList.minus(it),
//                size,
//                currentPermutation,
//                permutations
//            )
//            currentPermutation.removeAt(currentPermutation.size - 1)
//        }
        for (city in cityList) {
            currentPermutation.add(city)
            generatePermutations(cityList.minus(city), size, currentPermutation, permutations)
            currentPermutation.removeAt(currentPermutation.size - 1)
        }
    }

}

fun List<City>.totalDistance(): Int {
    return this.sumOf { it.distance }
}